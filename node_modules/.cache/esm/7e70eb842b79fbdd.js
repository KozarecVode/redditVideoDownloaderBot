let get,redditBaseUrlKey,redditUrls;_2b7‍.x([["containsRedditUrl",()=>containsRedditUrl],["extractRedditUrls",()=>extractRedditUrls],["getUrlObject",()=>getUrlObject],["downloadFile",()=>downloadFile]]);_2b7‍.w("lodash",[["get",["get"],function(v){get=v}]]);_2b7‍.w("../constants/general",[["redditBaseUrlKey",["redditBaseUrlKey"],function(v){redditBaseUrlKey=v}],["redditUrls",["redditUrls"],function(v){redditUrls=v}]]);


const https = require("https");
const fs = require("fs");
const axios = require("axios");

       const containsRedditUrl = (word = "") => {
  let contains = false;

  redditUrls.forEach((redditUrl) => {
    if (word.includes(redditUrl)) {
      contains = true;
    }
  });

  return contains;
};

       const extractRedditUrls = (message = "") => {
  let url = [];
  const urlRegex = /(https?:\/\/[^ ]*)/;

  message.split(" ").forEach((word) => {
    if (containsRedditUrl(word)) {
      url.push(word.match(urlRegex)[1]);
    }
  });

  return url;
};

       const getUrlObject = (url) => {
  return axios
    .get(url + ".json")
    .then((data) => {
      if (data && data.data) {
        const baseUrl = get(data, "data[0].data.children[0].data." + redditBaseUrlKey, null);

        if (baseUrl) {
          return {
            permaLink: url,
            videoUrl: baseUrl + "DASH_360.mp4",
            audioUrl: baseUrl + "DASH_audio.mp4",
          };
        } else {
          _2b7‍.g.console.warn("Unable to get base url from reddit topic: " + url + ".json");
          return null;
        }
      }
    })
    .catch((e) => {
      _2b7‍.g.console.warn("Unable to get necessarry data from reddit topic: " + url + ".json error:", e);
    });
};

       const downloadFile = (downloadUrl) => {
  const file = fs.createWriteStream("tempFiles/temp.mp4");
  https.get(downloadUrl, (response) => {
    response.pipe(file);
    file.on("finish", function () {
      file.close(cb);
    });
  });
};
