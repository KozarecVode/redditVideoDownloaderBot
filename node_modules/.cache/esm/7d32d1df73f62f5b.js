let get,deleteFile,downloadFile,extractRedditUrls,getUrlObject;_73f‍.x([["onReady",()=>onReady],["onNodeExit",()=>onNodeExit],["onMessage",()=>onMessage]]);_73f‍.w("lodash",[["get",["get"],function(v){get=v}]]);_73f‍.w("./general",[["deleteFile",["deleteFile"],function(v){deleteFile=v}],["downloadFile",["downloadFile"],function(v){downloadFile=v}],["extractRedditUrls",["extractRedditUrls"],function(v){extractRedditUrls=v}],["getUrlObject",["getUrlObject"],function(v){getUrlObject=v}]]);


       const onReady = (client) => {
  console.log(`Successfully logged in as ${client.user.tag}!`);
};

       const onNodeExit = (client) => {
  client.destroy();
};

       const onMessage = async (msg) => {
  const discriminator = get(msg, "author.discriminator", null);

  if (discriminator && discriminator != process.env.BOT_DISCRIMINATOR) {
    const messageContent = get(msg, "content", "");
    const redditUrls = extractRedditUrls(messageContent);
    const firstUrl = redditUrls[0] ? redditUrls[0] : null;

    // Only use first reddit url
    // TODO: Add support for multiple urls in the same message?
    if (firstUrl) {
      getUrlObject(firstUrl)
        .then((urlObject) => {
          if (urlObject) {
            const permalink = get(urlObject, "permaLink", null);
            const videoUrl = get(urlObject, "videoUrl", null);
            const audioUrl = get(urlObject, "audioUrl", null);

            // Use https://ds.redditsave.com/ to download the actual mp4 file
            if (permalink && videoUrl) {
              const downloadUrl = `https://ds.redditsave.com/download-sd.php?permalink=${permalink}&video_url=${videoUrl}&audio_url=${audioUrl}`;

              downloadFile(downloadUrl)
                .then((filePath) => {
                  const videoTitle = firstUrl.substring(firstUrl.lastIndexOf("/") + 1);

                  msg.channel
                    .send(`Uploaded ${videoTitle} directly for user convenience`, {
                      files: [filePath],
                    })
                    .finally(() => {
                      deleteFile(filePath);
                    });
                })
                .catch((e) => {
                  _73f‍.g.console.warn("Unable to download file", e);
                });
            }
          }
        })
        .catch((e) => {
          _73f‍.g.console.warn(e);
        });
    }
  }
};
